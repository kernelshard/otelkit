{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Zero boilerplate OpenTelemetry distributed tracing for Go applications.</p> <p>Production-ready distributed tracing that works with any Go web framework including Gin, Echo, Chi, Gorilla Mux, and standard net/http.</p> <p> </p> <p>Documentation: https://kernelshard.github.io/otelkit/</p> <p>Source Code: https://github.com/kernelshard/otelkit</p>"},{"location":"#why-use-otelkit","title":"Why use otelkit?","text":"<ul> <li>Framework Agnostic - Works seamlessly with Gin, Echo, Chi, Gorilla Mux, and any Go <code>http.Handler</code>. Perfect for microservices and REST APIs.</li> <li>Production Ready - Flexible sampling strategies, multiple exporters (Jaeger, OTLP, Zipkin), intelligent batch processing for high-performance applications.</li> <li>Robust &amp; Safe - Built-in nil checks, graceful error handling, context-aware operations ensure reliability in production.</li> <li>Easy to Learn - Minimal configuration with sensible defaults. Get distributed tracing running in your Go application in minutes.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>go get</code>:</p> <pre><code>go get github.com/kernelshard/otelkit\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Create a <code>main.go</code> with automatic HTTP request tracing:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Initialize tracing\n    shutdown, err := otelkit.SetupTracing(ctx, \"my-service\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer shutdown(ctx)\n\n    // Wrap your HTTP handler\n    handler := otelkit.NewInstrumentedHTTPHandler(\n        http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            w.Write([]byte(\"Hello, world!\"))\n        }),\n        \"hello-handler\",\n    )\n\n    http.ListenAndServe(\":8080\", handler)\n}\n</code></pre> <p>View Your Traces</p> <p>This example automatically traces all HTTP requests. View traces in Jaeger UI at http://localhost:16686 or your configured OpenTelemetry backend.</p>"},{"location":"#production-configuration","title":"Production Configuration","text":"<p>Configure the tracing provider with custom sampling and exporters:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Create custom configuration\n    config := otelkit.NewProviderConfig(\"my-service\", \"v1.0.0\").\n        WithEnvironment(\"production\").\n        WithOTLPExporter(\"otel-collector:4317\", \"grpc\", false).\n        WithSampling(\"probabilistic\", 0.1). // 10% sampling\n        WithBatchOptions(\n            5*time.Second,   // batch timeout\n            30*time.Second,  // export timeout\n            512,             // max batch size\n            2048,            // max queue size\n        )\n\n    provider, err := otelkit.NewProvider(ctx, config)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    // Your application code here\n}\n</code></pre>"},{"location":"#framework-integration","title":"Framework Integration","text":"<p>otelkit works seamlessly with popular Go web frameworks.</p>"},{"location":"#gin-framework","title":"Gin Framework","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/gin-gonic/gin\"\n    \"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    shutdown, err := otelkit.SetupTracing(ctx, \"gin-service\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer shutdown(ctx)\n\n    r := gin.Default()\n\n    // Add OpenTelemetry middleware\n    r.Use(otelgin.Middleware(\"gin-service\"))\n\n    r.GET(\"/\", func(c *gin.Context) {\n        c.JSON(http.StatusOK, gin.H{\"message\": \"Hello, world!\"})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"#chi-router","title":"Chi Router","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/go-chi/chi/v5\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    shutdown, err := otelkit.SetupTracing(ctx, \"chi-service\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer shutdown(ctx)\n\n    r := chi.NewRouter()\n\n    // Add otelkit middleware\n    tracer := otelkit.New(\"chi-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n    r.Use(func(next http.Handler) http.Handler {\n        return middleware.Middleware(next)\n    })\n\n    r.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Hello, world!\"))\n    })\n\n    http.ListenAndServe(\":8080\", r)\n}\n</code></pre> <p>More Framework Examples</p> <p>See the Integration Guides for complete examples with Echo, Fiber, Gorilla Mux, and other popular Go frameworks.</p>"},{"location":"#learn-more","title":"Learn More","text":"<p>Getting Started - Complete setup tutorial</p> <p>API Reference - Full API documentation</p> <p>Advanced Usage - Production configurations and optimization</p> <p>Troubleshooting - Common issues and solutions</p>"},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment and how to make a contribution to otelkit, see Contributing to otelkit.</p>"},{"location":"ADVANCED_USAGE/","title":"Advanced Usage Guide","text":"<p>This guide covers advanced configuration and production-ready usage patterns.</p>"},{"location":"ADVANCED_USAGE/#production-configuration","title":"Production Configuration","text":""},{"location":"ADVANCED_USAGE/#high-performance-setup","title":"High-Performance Setup","text":"<pre><code>config := otelkit.NewProviderConfig(\"payment-service\", \"v2.1.0\").\n    WithEnvironment(\"production\").\n    WithOTLPExporter(\"otel-collector:4317\", \"grpc\", false).\n    WithSampling(\"probabilistic\", 0.01). // 1% sampling\n    WithBatchOptions(\n        2*time.Second,   // batch timeout\n        30*time.Second,  // export timeout\n        1024,           // max batch size\n        4096,           // max queue size\n    )\n\nprovider, err := otelkit.NewProvider(ctx, config)\n</code></pre>"},{"location":"ADVANCED_USAGE/#custom-resource-attributes","title":"Custom Resource Attributes","text":"<pre><code>import (\n    \"go.opentelemetry.io/otel/sdk/resource\"\n    semconv \"go.opentelemetry.io/otel/semconv/v1.21.0\"\n)\n\nres, err := resource.New(ctx,\n    resource.WithAttributes(\n        semconv.ServiceName(\"payment-service\"),\n        semconv.ServiceVersion(\"v2.1.0\"),\n        semconv.DeploymentEnvironment(\"production\"),\n        semconv.HostName(\"payment-01\"),\n        semconv.ServiceInstanceID(\"instance-123\"),\n        attribute.String(\"cloud.provider\", \"aws\"),\n        attribute.String(\"cloud.region\", \"us-west-2\"),\n        attribute.String(\"k8s.cluster.name\", \"production-cluster\"),\n    ),\n)\n\nconfig := otelkit.NewProviderConfig(\"payment-service\", \"v2.1.0\").\n    WithResource(res)\n</code></pre>"},{"location":"ADVANCED_USAGE/#sampling-strategies","title":"Sampling Strategies","text":""},{"location":"ADVANCED_USAGE/#probabilistic-sampling","title":"Probabilistic Sampling","text":"<pre><code>// 1% sampling for production\nconfig.WithSampling(\"probabilistic\", 0.01)\n</code></pre>"},{"location":"ADVANCED_USAGE/#always-on-development","title":"Always On (Development)","text":"<pre><code>// 100% sampling for development\nconfig.WithSampling(\"always_on\", 0)\n</code></pre>"},{"location":"ADVANCED_USAGE/#always-off-testing","title":"Always Off (Testing)","text":"<pre><code>// Disable tracing for tests\nconfig.WithSampling(\"always_off\", 0)\n</code></pre>"},{"location":"ADVANCED_USAGE/#batch-processing-configuration","title":"Batch Processing Configuration","text":""},{"location":"ADVANCED_USAGE/#low-latency","title":"Low Latency","text":"<pre><code>config.WithBatchOptions(\n    500*time.Millisecond, // Fast batching\n    10*time.Second,       // Quick export timeout\n    256,                  // Small batches\n    1024,                 // Limited queue\n)\n</code></pre>"},{"location":"ADVANCED_USAGE/#high-throughput","title":"High Throughput","text":"<pre><code>config.WithBatchOptions(\n    10*time.Second,       // Longer batching\n    60*time.Second,       // Longer export timeout\n    2048,                 // Large batches\n    8192,                 // Large queue\n)\n</code></pre>"},{"location":"ADVANCED_USAGE/#error-handling-and-recovery","title":"Error Handling and Recovery","text":""},{"location":"ADVANCED_USAGE/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>func initTracing(ctx context.Context) *sdktrace.TracerProvider {\n    provider, err := otelkit.NewProvider(ctx, config)\n    if err != nil {\n        log.Printf(\"Failed to initialize tracing: %v\", err)\n        // Return noop provider for graceful degradation\n        return sdktrace.NewTracerProvider()\n    }\n    return provider\n}\n</code></pre>"},{"location":"ADVANCED_USAGE/#health-checks","title":"Health Checks","text":"<pre><code>func tracingHealthCheck(ctx context.Context) error {\n    // Create a test span to verify tracing is working\n    tracer := otelkit.New(\"health-check\")\n    _, span := tracer.Start(ctx, \"health-check\")\n    defer span.End()\n\n    // Add health check attributes\n    span.SetAttributes(\n        attribute.String(\"check.type\", \"tracing\"),\n        attribute.Bool(\"check.passed\", true),\n    )\n\n    return nil\n}\n</code></pre>"},{"location":"ADVANCED_USAGE/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"ADVANCED_USAGE/#memory-usage","title":"Memory Usage","text":"<pre><code>// Monitor span queue size\nconfig.WithBatchOptions(\n    5*time.Second,\n    30*time.Second,\n    512,\n    2048, // Monitor this value\n)\n</code></pre>"},{"location":"ADVANCED_USAGE/#export-metrics","title":"Export Metrics","text":"<pre><code>// Add custom metrics for tracing\nimport \"go.opentelemetry.io/otel/metric\"\n\nmeter := global.Meter(\"otelkit\")\nspanCounter, _ := meter.Int64Counter(\"spans_exported\")\nerrorCounter, _ := meter.Int64Counter(\"export_errors\")\n</code></pre>"},{"location":"ADVANCED_USAGE/#security-considerations","title":"Security Considerations","text":""},{"location":"ADVANCED_USAGE/#tls-configuration","title":"TLS Configuration","text":"<pre><code>config := otelkit.NewProviderConfig(\"service\", \"v1.0.0\").\n    WithOTLPExporter(\"collector.example.com:4317\", \"grpc\", false) // TLS enabled\n</code></pre>"},{"location":"ADVANCED_USAGE/#header-authentication","title":"Header Authentication","text":"<pre><code>// For custom authentication headers\nimport \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n\nexporter, err := otlptracehttp.New(ctx,\n    otlptracehttp.WithEndpoint(\"collector.example.com\"),\n    otlptracehttp.WithHeaders(map[string]string{\n        \"Authorization\": \"Bearer \" + token,\n    }),\n)\n</code></pre>"},{"location":"ADVANCED_USAGE/#multi-service-setup","title":"Multi-Service Setup","text":""},{"location":"ADVANCED_USAGE/#service-mesh-integration","title":"Service Mesh Integration","text":"<pre><code>// Configure for service mesh environments\nconfig := otelkit.NewProviderConfig(\"service\", \"v1.0.0\").\n    WithOTLPExporter(\"otel-collector.mesh.local:4317\", \"grpc\", false).\n    WithSampling(\"probabilistic\", 0.1)\n</code></pre>"},{"location":"ADVANCED_USAGE/#kubernetes-configuration","title":"Kubernetes Configuration","text":"<pre><code># Deployment configuration\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  template:\n    spec:\n      containers:\n      - name: app\n        env:\n        - name: OTEL_SERVICE_NAME\n          value: \"my-service\"\n        - name: OTEL_SERVICE_VERSION\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.labels['version']\n        - name: OTEL_RESOURCE_ATTRIBUTES\n          value: \"k8s.namespace.name=$(NAMESPACE),k8s.pod.name=$(POD_NAME)\"\n</code></pre>"},{"location":"ADVANCED_USAGE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ADVANCED_USAGE/#common-issues","title":"Common Issues","text":""},{"location":"ADVANCED_USAGE/#1-no-traces-appearing","title":"1. No Traces Appearing","text":"<ul> <li>Check collector endpoint connectivity</li> <li>Verify sampling configuration</li> <li>Check for dropped spans (queue full)</li> </ul>"},{"location":"ADVANCED_USAGE/#2-high-memory-usage","title":"2. High Memory Usage","text":"<ul> <li>Reduce batch size and queue size</li> <li>Increase sampling ratio</li> <li>Monitor span creation rate</li> </ul>"},{"location":"ADVANCED_USAGE/#3-performance-impact","title":"3. Performance Impact","text":"<ul> <li>Use probabilistic sampling</li> <li>Tune batch processing parameters</li> <li>Consider async span creation</li> </ul>"},{"location":"ADVANCED_USAGE/#debug-configuration","title":"Debug Configuration","text":"<p>```go // Enable debug logging import \"go.opentelemetry.io/otel/sdk/trace\"</p> <p>tp := sdktrace.NewTracerProvider(     sdktrace.WithSyncer(exporter), // Synchronous for debugging     sdktrace.WithResource(res), )</p>"},{"location":"API_REFERENCE/","title":"otelkit API Reference","text":"<p>package otelkit // import \"github.com/kernelshard/otelkit\"</p> <p>Package otelkit provides HTTP middleware for automatic request tracing. The middleware integrates seamlessly with any HTTP framework that supports the standard http.Handler interface, including gorilla/mux, chi, gin, echo, and others.</p> <p>Package otelkit provides OpenTelemetry tracer provider configuration and initialization. This file contains the core provider setup that configures exporters, sampling, resource identification, and batch processing for the entire tracing system.</p> <p>Package tracer provides span utility functions for OpenTelemetry tracing. These utilities offer safe, convenient methods for common span operations with built-in nil checks and error handling.</p>"},{"location":"API_REFERENCE/#constants","title":"Constants","text":""},{"location":"API_REFERENCE/#service-configuration-constants","title":"Service Configuration Constants","text":"<pre><code>const (\n    DefaultServiceName          = \"unknown-service\"\n    DefaultServiceVersion       = \"1.0.0\"\n    DefaultEnvironment          = \"development\"\n    DefaultOTLPExporterEndpoint = \"localhost:4317\"\n    DefaultSamplingRatio        = 0.2\n    DefaultSamplingType         = \"probabilistic\"\n    DefaultOTLPExporterProtocol = \"grpc\"\n    DefaultBatchTimeout         = 5 * time.Second\n    DefaultExportTimeout        = 30 * time.Second\n    DefaultMaxExportBatchSize   = 512\n    DefaultMaxQueueSize         = 2048\n)\n</code></pre>"},{"location":"API_REFERENCE/#opentelemetry-semantic-convention-constants","title":"OpenTelemetry Semantic Convention Constants","text":"<pre><code>const (\n    AttrHTTPMethod     = \"http.method\"\n    AttrHTTPURL        = \"http.url\"\n    AttrHTTPUserAgent  = \"http.user_agent\"\n    AttrHTTPStatusCode = \"http.status_code\"\n)\n</code></pre>"},{"location":"API_REFERENCE/#error-message-constants","title":"Error Message Constants","text":"<pre><code>const (\n    ErrServiceNameRequired     = \"service name is required\"\n    ErrServiceVersionRequired  = \"service version is required\"\n    ErrInvalidEnvironment      = \"invalid environment\"\n    ErrInvalidSamplingType     = \"invalid sampling type\"\n    ErrInvalidSamplingRatio    = \"sampling ratio must be between 0 and 1\"\n    ErrInvalidExporterProtocol = \"invalid exporter protocol\"\n    ErrInvalidExporterEndpoint = \"exporter endpoint is required\"\n)\n</code></pre>"},{"location":"API_REFERENCE/#environment-variable-constants","title":"Environment Variable Constants","text":"<pre><code>const (\n    EnvServiceName          = \"OTEL_SERVICE_NAME\"\n    EnvServiceVersion       = \"OTEL_SERVICE_VERSION\"\n    EnvEnvironment          = \"OTEL_ENVIRONMENT\"\n    EnvOTLPExporterEndpoint = \"OTEL_EXPORTER_OTLP_ENDPOINT\"\n    EnvOTLPExporterInsecure = \"OTEL_EXPORTER_OTLP_INSECURE\"\n    EnvOTLPExporterProtocol = \"OTEL_EXPORTER_OTLP_PROTOCOL\"\n    EnvBatchTimeout         = \"OTEL_BSP_TIMEOUT\"\n    EnvExportTimeout        = \"OTEL_EXPORTER_TIMEOUT\"\n    EnvMaxExportBatchSize   = \"OTEL_BSP_MAX_EXPORT_BATCH_SIZE\"\n    EnvMaxQueueSize         = \"OTEL_BSP_MAX_QUEUE_SIZE\"\n    EnvSamplingType         = \"OTEL_TRACES_SAMPLER\"\n    EnvSamplingRatio        = \"OTEL_TRACES_SAMPLER_ARG\"\n    EnvInstanceID           = \"OTEL_RESOURCE_ATTRIBUTES_SERVICE_INSTANCE_ID\"\n)\n</code></pre>"},{"location":"API_REFERENCE/#variables","title":"Variables","text":""},{"location":"API_REFERENCE/#valid-configuration-options","title":"Valid Configuration Options","text":"<pre><code>var (\n    ValidEnvironments  = []string{\"development\", \"staging\", \"production\"}\n    ValidSamplingTypes = []string{\"probabilistic\", \"always_on\", \"always_off\"}\n    ValidHTTPMethods   = []string{\n        http.MethodHead, http.MethodPost, http.MethodPut,\n        http.MethodDelete, http.MethodPatch, http.MethodHead, http.MethodOptions,\n    }\n    ValidOTLPProtocols = []string{\"grpc\", \"http\"}\n)\n</code></pre>"},{"location":"API_REFERENCE/#functions","title":"Functions","text":""},{"location":"API_REFERENCE/#addattributes","title":"AddAttributes","text":"<pre><code>func AddAttributes(span trace.Span, attrs ...attribute.KeyValue)\n</code></pre> <p>AddAttributes safely adds one or more attributes to the given span. If the span is nil, this function is a no-op. This is useful for adding contextual information to spans such as user IDs, request parameters, or business logic details.</p> <p>Example:</p> <pre><code>AddAttributes(span,\n    attribute.String(\"user.id\", \"12345\"),\n    attribute.Int(\"request.size\", 1024),\n    attribute.Bool(\"cache.hit\", true),\n)\n</code></pre>"},{"location":"API_REFERENCE/#addevent","title":"AddEvent","text":"<pre><code>func AddEvent(span trace.Span, name string, attrs ...attribute.KeyValue)\n</code></pre> <p>AddEvent safely adds a named event with optional attributes to the span. Events are timestamped markers that can help understand the flow of execution. If the span is nil, this function is a no-op.</p> <p>Example:</p> <pre><code>AddEvent(span, \"cache.miss\",\n    attribute.String(\"key\", cacheKey),\n    attribute.String(\"reason\", \"expired\"),\n)\n</code></pre>"},{"location":"API_REFERENCE/#addtimedevent","title":"AddTimedEvent","text":"<pre><code>func AddTimedEvent(span trace.Span, name string, duration time.Duration)\n</code></pre> <p>AddTimedEvent adds an event with duration information to the span. This is useful for recording the time taken for specific operations within a larger span. The duration is added as a string attribute.</p> <p>Example:</p> <pre><code>start := time.Now()\n// ... perform operation\nAddTimedEvent(span, \"database.query\", time.Since(start))\n</code></pre>"},{"location":"API_REFERENCE/#endspan","title":"EndSpan","text":"<pre><code>func EndSpan(span trace.Span)\n</code></pre> <p>EndSpan safely ends the given span. If the span is nil, this function is a no-op. This provides a safe way to end spans without worrying about nil checks.</p> <p>Example:</p> <pre><code>defer EndSpan(span)\n</code></pre>"},{"location":"API_REFERENCE/#extracttracecontext","title":"ExtractTraceContext","text":"<pre><code>func ExtractTraceContext(req *http.Request) context.Context\n</code></pre> <p>ExtractTraceContext extracts trace context from HTTP request headers into the context.</p>"},{"location":"API_REFERENCE/#injecttracecontext","title":"InjectTraceContext","text":"<pre><code>func InjectTraceContext(ctx context.Context, req *http.Request)\n</code></pre> <p>InjectTraceContext injects the current trace context into the HTTP request headers.</p>"},{"location":"API_REFERENCE/#injecttraceidintocontext","title":"InjectTraceIDIntoContext","text":"<pre><code>func InjectTraceIDIntoContext(ctx context.Context, span trace.Span) context.Context\n</code></pre> <p>InjectTraceIDIntoContext adds trace ID into the context (as a new value).</p>"},{"location":"API_REFERENCE/#isrecording","title":"IsRecording","text":"<pre><code>func IsRecording(span trace.Span) bool\n</code></pre> <p>IsRecording checks if the span is currently recording telemetry data. Returns false if the span is nil or if the span context is invalid. This can be used to avoid expensive operations when tracing is disabled or when working with noop spans.</p> <p>Example:</p> <pre><code>if IsRecording(span) {\n    // Perform expensive attribute computation\n    span.SetAttributes(expensiveAttributes()...)\n}\n</code></pre>"},{"location":"API_REFERENCE/#mustsetuptracing","title":"MustSetupTracing","text":"<pre><code>func MustSetupTracing(ctx context.Context, serviceName string, serviceVersion ...string) func(context.Context) error\n</code></pre> <p>MustSetupTracing is like SetupTracing but panics on error. Use this for simple programs where you want to fail fast.</p>"},{"location":"API_REFERENCE/#newconfigerror","title":"NewConfigError","text":"<pre><code>func NewConfigError(field, message string) error\n</code></pre> <p>NewConfigError creates a new ConfigError.</p>"},{"location":"API_REFERENCE/#newdefaultprovider","title":"NewDefaultProvider","text":"<pre><code>func NewDefaultProvider(ctx context.Context, serviceName string, serviceVersion ...string) (*sdktrace.TracerProvider, error)\n</code></pre> <p>NewDefaultProvider creates a tracer provider with default settings and sets it as the global provider. This is a convenience function for quick setup in development or simple applications. It creates a provider with opinionated defaults: - HTTP OTLP exporter to localhost:4318 (insecure) - Probabilistic sampling at the default rate (typically 20%) - Standard batch processing settings - Automatic resource detection for service identification</p> <p>The provider is set as the global OpenTelemetry provider (only once per application). For production use or when you need custom configuration, use NewProvider with NewProviderConfig.</p> <p>Note: This is the function most users will start with. It's designed to \"just work\" for local development and testing scenarios.</p> <p>Example:</p> <pre><code>provider, err := tracer.NewDefaultProvider(ctx, \"my-service\", \"v1.0.0\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer provider.Shutdown(ctx)\n</code></pre>"},{"location":"API_REFERENCE/#newinitializationerror","title":"NewInitializationError","text":"<pre><code>func NewInitializationError(component string, cause error) error\n</code></pre> <p>NewInitializationError creates a new InitializationError.</p>"},{"location":"API_REFERENCE/#newinstrumentedgrpcclientdialoptions","title":"NewInstrumentedGRPCClientDialOptions","text":"<pre><code>func NewInstrumentedGRPCClientDialOptions() []grpc.DialOption\n</code></pre> <p>NewInstrumentedGRPCClientDialOptions returns grpc.DialOption slice with OpenTelemetry instrumentation for client connections. Use this in grpc.Dial for instrumented client connections.</p>"},{"location":"API_REFERENCE/#newinstrumentedgrpcserver","title":"NewInstrumentedGRPCServer","text":"<pre><code>func NewInstrumentedGRPCServer(opts ...grpc.ServerOption) *grpc.Server\n</code></pre> <p>NewInstrumentedGRPCServer creates a new gRPC server with OpenTelemetry unary and stream interceptors attached automatically.</p>"},{"location":"API_REFERENCE/#newinstrumentedhttpclient","title":"NewInstrumentedHTTPClient","text":"<pre><code>func NewInstrumentedHTTPClient(baseTransport http.RoundTripper) *http.Client\n</code></pre> <p>NewInstrumentedHTTPClient returns an *http.Client with OpenTelemetry transport for automatic HTTP tracing. You can customize it by passing a base transport; if nil, http.DefaultTransport is used.</p>"},{"location":"API_REFERENCE/#newinstrumentedhttphandler","title":"NewInstrumentedHTTPHandler","text":"<pre><code>func NewInstrumentedHTTPHandler(handler http.Handler, operationName string) http.Handler\n</code></pre> <p>NewInstrumentedHTTPHandler wraps an http.Handler with OpenTelemetry instrumentation and returns the wrapped handler. Usage: http.Handle(\"/path\", NewInstrumentedHTTPHandler(yourHandler, \"operationName\"))</p>"},{"location":"API_REFERENCE/#newpropagationerror","title":"NewPropagationError","text":"<pre><code>func NewPropagationError(operation string, cause error) error\n</code></pre> <p>NewPropagationError creates a new PropagationError.</p>"},{"location":"API_REFERENCE/#newprovider","title":"NewProvider","text":"<pre><code>func NewProvider(ctx context.Context, cfg *ProviderConfig) (*sdktrace.TracerProvider, error)\n</code></pre> <p>NewProvider creates and configures a new TracerProvider using the provided configuration, then sets it as the global OpenTelemetry provider (only once per application lifecycle). This is the recommended way to initialize tracing when you need custom configuration.</p> <p>The function ensures that the global provider is set only once, even if called multiple times. This prevents conflicts and ensures consistent tracing behavior across the application.</p> <p>Example:</p> <pre><code>config := tracer.NewProviderConfig(\"payment-service\", \"v1.2.3\").\n    WithOTLPExporter(\"https://api.honeycomb.io\", \"http\", false).\n    WithSampling(\"probabilistic\", 0.05)\n\nprovider, err := tracer.NewProvider(ctx, config)\nif err != nil {\n    log.Fatal(err)\n}\ndefer provider.Shutdown(ctx)\n</code></pre>"},{"location":"API_REFERENCE/#recorderror","title":"RecordError","text":"<pre><code>func RecordError(span trace.Span, err error)\n</code></pre> <p>RecordError safely records an error on the span and sets the span status to error. This function handles nil checks for both span and error. When an error is recorded, the span status is automatically set to codes.Error with the error message. This is essential for proper error tracking in distributed tracing.</p> <p>Example:</p> <pre><code>if err := doSomething(); err != nil {\n    RecordError(span, err)\n    return err\n}\n</code></pre>"},{"location":"API_REFERENCE/#setglobaltracerprovider","title":"SetGlobalTracerProvider","text":"<pre><code>func SetGlobalTracerProvider(tp trace.TracerProvider)\n</code></pre> <p>SetGlobalTracerProvider sets the global OpenTelemetry tracer provider. This should typically be called once during application initialization. All subsequent tracer instances will use this provider.</p> <p>Example:</p> <pre><code>provider := setupTracerProvider()\ntracer.SetGlobalTracerProvider(provider)\n</code></pre>"},{"location":"API_REFERENCE/#setupcustomtracing","title":"SetupCustomTracing","text":"<pre><code>func SetupCustomTracing(ctx context.Context, cfg *ProviderConfig) (*sdktrace.TracerProvider, error)\n</code></pre> <p>SetupCustomTracing provides full control over the tracing setup. Use this when you need custom configuration that goes beyond environment variables.</p>"},{"location":"API_REFERENCE/#setuptracing","title":"SetupTracing","text":"<pre><code>func SetupTracing(ctx context.Context, serviceName string, serviceVersion ...string) (func(context.Context) error, error)\n</code></pre> <p>SetupTracing initializes OpenTelemetry tracing with sensible defaults. This is the simplest way to get started with tracing.</p> <p>Example:</p> <pre><code>shutdown, err := tracer.SetupTracing(ctx, \"my-service\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer shutdown(ctx)\n</code></pre> <p>The function reads configuration from environment variables and sets up: - OTLP exporter (HTTP by default, localhost:4318) - Probabilistic sampling (20% by default) - Batch span processor with sensible defaults - Resource     with service information</p> <p>func SetupTracingWithDefaults(ctx context.Context, serviceName, serviceVersion string) (func(context.Context) error, error)     SetupTracingWithDefaults initializes tracing with hardcoded defaults.     This is useful for quick setup without environment variables.</p> <pre><code>It uses: - HTTP OTLP exporter to localhost:4318 (insecure) - Probabilistic\nsampling at 20% - Standard batch processing settings\n</code></pre> <p>func ShutdownTracerProvider(ctx context.Context, tp *sdktrace.TracerProvider) error     ShutdownTracerProvider gracefully shuts down the tracer provider,     ensuring all pending spans are exported before the application terminates.     This function should be called during application shutdown, typically with a     context that has a reasonable timeout.</p> <pre><code>The shutdown process:\n 1. Stops accepting new spans\n 2. Exports all remaining spans in the queue\n 3. Closes the exporter connection\n 4. Releases any resources held by the provider\n\nExample:\n\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    if err := tracer.ShutdownTracerProvider(ctx, provider); err != nil {\n        log.Printf(\"Error during tracer shutdown: %v\", err)\n    }\n</code></pre>"},{"location":"API_REFERENCE/#traceidfromcontext","title":"TraceIDFromContext","text":"<pre><code>func TraceIDFromContext(ctx context.Context) string\n</code></pre> <p>TraceIDFromContext tries to retrieve trace ID from context.</p>"},{"location":"API_REFERENCE/#types","title":"Types","text":""},{"location":"API_REFERENCE/#config","title":"Config","text":"<pre><code>type Config struct {\n    // Service identification metadata\n    ServiceName    string // Name of the service (required)\n    ServiceVersion string // Version of the service (required)\n    Environment    string // Deployment environment (development/staging/production)\n\n    // OTLP exporter settings\n    OTLPExporterEndpoint string // Collector endpoint (host:port)\n    OTLPExporterInsecure bool   // Disable TLS verification\n    OTLPExporterProtocol string // Protocol for OTLP exporter (default: grpc)\n\n    // Batch processing configuration\n    BatchTimeout       time.Duration // Timeout for batch processing (default: 5s)\n    ExportTimeout      time.Duration // Timeout for export requests (default: 30s)\n    MaxExportBatchSize int           // Maximum batch size for exports (default: 512)\n    MaxQueueSize       int           // Maximum queue size for spans (default: 2048)\n\n    // Sampling configuration\n    SamplingRatio float64 // Ratio of traces to sample (0.0 - 1.0)\n    SamplingType  string  // Sampling strategy\n\n    // Resource attributes\n    InstanceID string // Unique instance identifier\n    Hostname   string // Host machine name\n}\n</code></pre> <p>Config defines tracing configuration parameters</p>"},{"location":"API_REFERENCE/#newconfig","title":"NewConfig","text":"<pre><code>func NewConfig(serviceName, serviceVersion string) *Config\n</code></pre> <p>NewConfig creates a configuration with sensible defaults</p>"},{"location":"API_REFERENCE/#newconfigfromenv","title":"NewConfigFromEnv","text":"<pre><code>func NewConfigFromEnv() *Config\n</code></pre> <p>NewConfigFromEnv creates configuration from environment variables</p>"},{"location":"API_REFERENCE/#validate","title":"Validate","text":"<pre><code>func (c *Config) Validate() error\n</code></pre> <p>Validate ensures configuration parameters are correct     Validate ensures configuration parameters are correct</p> <p>func (c Config) WithEnvironment(env string) Config     WithEnvironment sets the deployment environment</p> <p>func (c Config) WithOTLPExporter(endpoint string, insecure bool, protocol string) Config     WithOTLPExporter configures the OTLP exporter (endpoint, insecure mode,     and protocol)</p> <p>func (c Config) WithSampling(samplingType string, ratio float64) Config     WithSampling configures the sampling strategy</p> <p>type ConfigError struct {     Field   string     Message string }     ConfigError represents a validation error in configuration.</p> <p>func (e *ConfigError) Error() string     Error returns a string representation of the error.</p> <p>type HTTPMiddleware struct {     // Has unexported fields. }     HTTPMiddleware provides HTTP middleware for automatic request tracing.     It extracts trace context from incoming requests, creates server spans,     and automatically records HTTP-specific attributes like method, URL, status     code, and user agent. The middleware handles trace context propagation     according to W3C Trace Context and B3 propagation standards.</p> <pre><code>The middleware is compatible with any HTTP framework that uses the standard\nhttp.Handler interface.\n</code></pre> <p>func NewHttpMiddleware(tracer Tracer) HTTPMiddleware     NewHttpMiddleware creates a new HTTPMiddleware instance using the provided     Tracer. The tracer will be used to create spans for all incoming HTTP     requests.</p> <pre><code>Example:\n\n    tracer := otelkit.New(\"http-service\")\n    middleware := tracer.NewHttpMiddleware(tracer)\n\n    // With gorilla/mux\n    r := mux.NewRouter()\n    r.Use(middleware.Middleware)\n\n    // With chi\n    r := chi.NewRouter()\n    r.Use(middleware.Middleware)\n\n    // With standard http.ServeMux\n    mux := http.NewServeMux()\n    handler := middleware.Middleware(mux)\n</code></pre> <p>func (m *HTTPMiddleware) Middleware(next http.Handler) http.Handler     Middleware returns an HTTP handler middleware function that automatically     traces incoming requests.</p> <pre><code>The middleware performs the following operations:\n 1. Extracts trace context from incoming request headers (supports W3C Trace\n    Context and B3)\n 2. Creates a new server span with operation name \"METHOD /path\"\n 3. Adds standard HTTP attributes: method, URL, user agent\n 4. Wraps the response writer to capture the HTTP status code\n 5. Propagates the trace context to downstream handlers\n 6. Records the final HTTP status code when the request completes\n\nExample usage:\n\n    middleware := tracer.NewHttpMiddleware(tracer)\n\n    http.Handle(\"/api/\", middleware.Middleware(apiHandler))\n\n    // Or with a router:\n    r := mux.NewRouter()\n    r.Use(middleware.Middleware)\n    r.HandleFunc(\"/users/{id}\", getUserHandler)\n</code></pre> <p>type InitializationError struct {     Component string     Cause     error }     InitializationError wraps failures during component setup.</p> <p>func (e *InitializationError) Error() string     Error returns a string representation of the error.</p> <p>func (e *InitializationError) Unwrap() error     Unwrap returns the underlying error.</p> <p>type PropagationError struct {     Operation string     Cause     error }     PropagationError wraps errors related to context propagation.</p> <p>func (e *PropagationError) Error() string     Error returns a string representation of the error.</p> <p>func (e *PropagationError) Unwrap() error     Unwrap returns the underlying error.</p> <p>type ProviderConfig struct {     // Config contains the core tracing configuration including service identification,     // exporter settings, and sampling strategy.     Config *Config</p> <pre><code>// Resource provides custom resource attributes for service identification.\n// If nil, a default resource will be created using service name, version,\n// environment, hostname, and instance ID from Config.\nResource *sdkresource.Resource\n\n// BatchTimeout is the maximum time the batch processor waits before\n// exporting spans. Lower values reduce latency but may increase overhead.\n// Default: 5 seconds.\nBatchTimeout time.Duration\n\n// ExportTimeout is the maximum time allowed for exporting a batch of spans.\n// Exports exceeding this timeout will be cancelled. Default: 30 seconds.\nExportTimeout time.Duration\n\n// MaxExportBatchSize is the maximum number of spans to export in a single batch.\n// Larger batches improve throughput but use more memory. Default: 512.\nMaxExportBatchSize int\n\n// MaxQueueSize is the maximum number of spans that can be queued for export.\n// When the queue is full, new spans will be dropped. Default: 2048.\nMaxQueueSize int\n</code></pre> <p>}     ProviderConfig holds comprehensive configuration for creating a     TracerProvider. It combines basic tracing configuration with advanced     options for batch processing, resource identification, and performance     tuning. This allows fine-grained control over the tracing pipeline behavior.</p> <pre><code>The configuration supports fluent method chaining for ease of use:\n\n    config := tracer.NewProviderConfig(\"my-service\", \"v1.0.0\").\n        WithOTLPExporter(\"localhost:4317\", \"grpc\", true).\n        WithSampling(\"probabilistic\", 0.1).\n        WithBatchOptions(5*time.Second, 30*time.Second, 512, 2048)\n</code></pre> <p>func NewProviderConfig(serviceName, serviceVersion string) *ProviderConfig     NewProviderConfig creates a new ProviderConfig with sensible defaults for     advanced configuration. It initializes the configuration with default batch     processing settings and creates a base Config using the provided service     name and version. The returned config supports fluent method chaining for     customization.</p> <pre><code>Default settings:\n  - BatchTimeout: 5 seconds\n  - ExportTimeout: 30 seconds\n  - MaxExportBatchSize: 512 spans\n  - MaxQueueSize: 2048 spans\n  - OTLP HTTP exporter pointing to localhost:4318\n  - Probabilistic sampling at 20%\n\nExample:\n\n    config := tracer.NewProviderConfig(\"user-service\", \"v2.1.0\")\n    provider, err := tracer.NewProvider(ctx, config)\n</code></pre> <p>func (pc ProviderConfig) WithBatchOptions(batchTimeout, exportTimeout time.Duration, maxExportBatchSize, maxQueueSize int) ProviderConfig     WithBatchOptions configures the batch processor settings for span export     optimization. These settings control how spans are batched and exported,     affecting both performance and resource usage. Tune these values based on     your application's traffic patterns and latency requirements.</p> <pre><code>Parameters:\n  - batchTimeout: Maximum time to wait before exporting (lower = less\n    latency, higher = better throughput)\n  - exportTimeout: Maximum time allowed for export operations (prevents\n    hanging exports)\n  - maxExportBatchSize: Maximum spans per batch (higher = better throughput,\n    more memory usage)\n  - maxQueueSize: Maximum queued spans before dropping (higher = more\n    memory, less data loss)\n\nExample:\n\n    // Low-latency configuration\n    config.WithBatchOptions(1*time.Second, 10*time.Second, 256, 1024)\n\n    // High-throughput configuration\n    config.WithBatchOptions(10*time.Second, 60*time.Second, 1024, 4096)\n</code></pre> <p>func (pc ProviderConfig) WithOTLPExporter(endpoint, protocol string, insecure bool) ProviderConfig     WithOTLPExporter configures the OTLP exporter settings for trace export.     This method allows you to specify the endpoint, protocol, and security     settings for sending traces to an OTLP-compatible backend.</p> <pre><code>Parameters:\n  - endpoint: The URL or address of the OTLP collector (e.g.,\n    \"localhost:4317\", \"https://api.honeycomb.io\")\n  - protocol: Either \"grpc\" for gRPC transport or \"http\" for HTTP transport\n  - insecure: true to disable TLS (for development), false to use TLS (for\n    production)\n\nExample:\n\n    config.WithOTLPExporter(\"https://api.honeycomb.io\", \"http\", false)\n    config.WithOTLPExporter(\"localhost:4317\", \"grpc\", true)  // Development\n</code></pre> <p>func (pc ProviderConfig) WithResource(resource sdkresource.Resource) *ProviderConfig     WithResource sets a custom OpenTelemetry resource for service     identification. Resources contain attributes that identify the service,     version, environment, and other metadata. If not provided, a default     resource will be created automatically using the service name, version,     and other attributes from the Config.</p> <pre><code>Example:\n\n    resource, _ := resource.New(ctx,\n        resource.WithAttributes(\n            semconv.ServiceName(\"payment-service\"),\n            semconv.ServiceVersion(\"v1.2.3\"),\n            semconv.DeploymentEnvironment(\"production\"),\n            attribute.String(\"region\", \"us-west-2\"),\n        ),\n    )\n    config.WithResource(resource)\n</code></pre> <p>func (pc ProviderConfig) WithSampling(samplingType string, ratio float64) ProviderConfig     WithSampling configures the sampling strategy and ratio for trace     collection. Sampling controls what percentage of traces are collected     and exported, which is crucial for managing overhead in high-traffic     applications.</p> <pre><code>Parameters:\n  - samplingType: \"probabilistic\" (ratio-based), \"always_on\" (100%),\n    or \"always_off\" (0%)\n  - ratio: For probabilistic sampling, the ratio of traces to sample (0.0 to\n    1.0) Ignored for \"always_on\" and \"always_off\" strategies\n\nExample:\n\n    config.WithSampling(\"probabilistic\", 0.01)  // 1% sampling for production\n    config.WithSampling(\"always_on\", 0)        // 100% sampling for development\n    config.WithSampling(\"always_off\", 0)       // Disable tracing\n</code></pre> <p>type Tracer struct {     // Has unexported fields. }     Tracer wraps OpenTelemetry tracer with convenience methods for easier     tracing operations. It provides a simplified interface for creating spans,     adding attributes, and managing trace context while maintaining full     compatibility with OpenTelemetry standards.</p> <pre><code>Example usage:\n\n    tracer := otelkit.New(\"my-service\")\n    ctx, span := tracer.Start(ctx, \"operation-name\")\n    defer span.End()\n    // ... your code here\n</code></pre> <p>func New(name string) *Tracer     New creates a new Tracer instance with the specified name. The name is used     to identify the tracer and appears in telemetry data. It's recommended to     use your service or component name.</p> <pre><code>Example:\n\n    tracer := otelkit.New(\"user-service\")\n    tracer := otelkit.New(\"payment-processor\")\n</code></pre> <p>func (t *Tracer) GetTraceID(ctx context.Context) string     GetTraceID extracts and returns the trace ID from the current span context.     Returns an empty string if no valid span is found in the context. This is     useful for correlation logging and debugging.</p> <pre><code>Example:\n\n    traceID := tracer.GetTraceID(ctx)\n    log.WithField(\"trace_id\", traceID).Info(\"Processing request\")\n</code></pre> <p>func (t *Tracer) OtelTracer() trace.Tracer     OtelTracer returns the underlying OpenTelemetry tracer instance. This is     useful when you need direct access to OpenTelemetry APIs or when integrating     with other OpenTelemetry-compatible libraries.</p> <pre><code>Example:\n\n    otelTracer := tracer.OtelTracer()\n    // Use with other OpenTelemetry libraries\n</code></pre> <p>func (t *Tracer) Start(ctx context.Context, name string, opts ...trace.SpanStartOption) (context.Context, trace.Span)     Start creates a new span with the given name and options. Returns a new     context containing the span and the span itself. The span must be ended by     calling span.End() when the operation completes.</p> <pre><code>Example:\n\n    ctx, span := tracer.Start(ctx, \"database-query\")\n    defer span.End()\n    // ... perform database operation\n</code></pre> <p>func (t *Tracer) StartClientSpan(ctx context.Context, operation string, attrs ...attribute.KeyValue) (context.Context, trace.Span)     StartClientSpan creates a new client span for outgoing requests or     operations. This is a convenience method that automatically sets the span     kind to SpanKindClient and adds the provided attributes. Use this for HTTP     client requests, gRPC client calls, database queries, external API calls,     etc.</p> <pre><code>Example:\n\n    ctx, span := tracer.StartClientSpan(ctx, \"call-payment-api\",\n        attribute.String(\"http.method\", \"POST\"),\n        attribute.String(\"http.url\", \"https://api.payment.com/charge\"),\n    )\n    defer span.End()\n</code></pre> <p>func (t *Tracer) StartServerSpan(ctx context.Context, operation string, attrs ...attribute.KeyValue) (context.Context, trace.Span)     StartServerSpan creates a new server span for incoming requests or     operations. This is a convenience method that automatically sets the span     kind to SpanKindServer and adds the provided attributes. Use this for HTTP     handlers, gRPC server methods, message queue consumers, etc.</p> <pre><code>Example:\n\n    ctx, span := tracer.StartServerSpan(ctx, \"handle-user-request\",\n        attribute.String(\"user.id\", userID),\n        attribute.String(\"request.method\", \"POST\"),\n    )\n    defer span.End()\n</code></pre> <p>Generated on Sun Aug 24 06:06:11 UTC 2025</p>"},{"location":"GETTING_STARTED/","title":"Getting Started with OtelKit","text":"<p>This guide will help you get up and running with OtelKit in just a few minutes.</p>"},{"location":"GETTING_STARTED/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.22 or later</li> <li>An OpenTelemetry collector (Jaeger, Zipkin, or OTLP-compatible)</li> <li>Basic understanding of Go HTTP servers</li> </ul>"},{"location":"GETTING_STARTED/#quick-start-5-minutes","title":"Quick Start (5 minutes)","text":""},{"location":"GETTING_STARTED/#1-install-otelkit","title":"1. Install OtelKit","text":"<pre><code>go get github.com/kernelshard/otelkit\n</code></pre>"},{"location":"GETTING_STARTED/#2-basic-setup","title":"2. Basic Setup","text":"<p>Create a simple HTTP server with tracing:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Initialize tracing with defaults\n    provider, err := otelkit.NewDefaultProvider(ctx, \"my-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer func() {\n        shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n        provider.Shutdown(shutdownCtx)\n    }()\n\n    // Create tracer\n    tracer := otelkit.New(\"my-service\")\n\n    // Create HTTP middleware\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    // Setup routes\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Hello, OpenTelemetry!\"))\n    })\n\n    // Start server\n    handler := middleware.Middleware(mux)\n    log.Println(\"Server starting on :8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n</code></pre>"},{"location":"GETTING_STARTED/#3-run-with-jaeger-local-development","title":"3. Run with Jaeger (Local Development)","text":"<pre><code># Start Jaeger in Docker\ndocker run -d --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n\n# Run your service\ngo run main.go\n\n# View traces at http://localhost:16686\n</code></pre>"},{"location":"GETTING_STARTED/#configuration-options","title":"Configuration Options","text":""},{"location":"GETTING_STARTED/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables to configure OtelKit:</p> <pre><code># Service identification\nexport OTEL_SERVICE_NAME=my-service\nexport OTEL_SERVICE_VERSION=1.0.0\nexport OTEL_ENVIRONMENT=development\n\n# Collector configuration\nexport OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_INSECURE=true\n\n# Sampling\nexport OTEL_TRACES_SAMPLER=probabilistic\nexport OTEL_TRACES_SAMPLER_ARG=0.1  # 10% sampling\n</code></pre>"},{"location":"GETTING_STARTED/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>config := otelkit.NewProviderConfig(\"my-service\", \"v1.0.0\").\n    WithOTLPExporter(\"collector:4317\", \"grpc\", false).\n    WithSampling(\"probabilistic\", 0.05)\n\nprovider, err := otelkit.NewProvider(ctx, config)\n</code></pre>"},{"location":"GETTING_STARTED/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage Guide - Production configuration</li> <li>Integration Guides - Framework-specific setup</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"INTEGRATION_GUIDES/","title":"Integration Guides","text":"<p>This guide provides framework-specific integration instructions for popular Go web frameworks.</p>"},{"location":"INTEGRATION_GUIDES/#standard-library-nethttp","title":"Standard Library (net/http)","text":""},{"location":"INTEGRATION_GUIDES/#basic-integration","title":"Basic Integration","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    provider, err := otelkit.NewDefaultProvider(ctx, \"http-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    tracer := otelkit.New(\"http-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Hello, World!\"))\n    })\n\n    handler := middleware.Middleware(mux)\n    log.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#with-custom-handlers","title":"With Custom Handlers","text":"<pre><code>mux.HandleFunc(\"/api/users\", func(w http.ResponseWriter, r *http.Request) {\n    ctx, span := tracer.Start(r.Context(), \"get-users\")\n    defer span.End()\n\n    // Your business logic here\n    span.SetAttributes(attribute.Int(\"user.count\", 42))\n\n    w.WriteHeader(http.StatusOK)\n    json.NewEncoder(w).Encode(users)\n})\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#gin-framework","title":"Gin Framework","text":""},{"location":"INTEGRATION_GUIDES/#installation","title":"Installation","text":"<pre><code>go get github.com/gin-gonic/gin\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#basic-setup","title":"Basic Setup","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    provider, err := otelkit.NewDefaultProvider(ctx, \"gin-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    tracer := otelkit.New(\"gin-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    r := gin.Default()\n    r.Use(func(c *gin.Context) {\n        // Convert Gin context to http.Handler\n        middleware.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            c.Next()\n        })).ServeHTTP(c.Writer, c.Request)\n    })\n\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"pong\"})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#gin-middleware-wrapper","title":"Gin Middleware Wrapper","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/kernelshard/otelkit\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n\nfunc OtelKitMiddleware(tracer *otelkit.Tracer) gin.HandlerFunc {\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    return func(c *gin.Context) {\n        handler := middleware.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            c.Request = r\n            c.Next()\n        }))\n        handler.ServeHTTP(c.Writer, c.Request)\n    }\n}\n\n// Usage\nfunc main() {\n    r := gin.Default()\n    tracer := otelkit.New(\"gin-service\")\n    r.Use(OtelKitMiddleware(tracer))\n\n    r.GET(\"/users/:id\", getUser)\n    r.Run(\":8080\")\n}\n\nfunc getUser(c *gin.Context) {\n    userID := c.Param(\"id\")\n\n    // Create custom span\n    ctx, span := tracer.Start(c.Request.Context(), \"get-user-by-id\")\n    defer span.End()\n\n    span.SetAttributes(attribute.String(\"user.id\", userID))\n\n    // Your business logic\n    c.JSON(200, gin.H{\"user\": userID})\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#chi-router","title":"Chi Router","text":""},{"location":"INTEGRATION_GUIDES/#installation_1","title":"Installation","text":"<pre><code>go get github.com/go-chi/chi/v5\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#basic-setup_1","title":"Basic Setup","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/go-chi/chi/v5\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    provider, err := otelkit.NewDefaultProvider(ctx, \"chi-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    tracer := otelkit.New(\"chi-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    r := chi.NewRouter()\n    r.Use(func(next http.Handler) http.Handler {\n        return middleware.Middleware(next)\n    })\n\n    r.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Hello, Chi!\"))\n    })\n\n    http.ListenAndServe(\":8080\", r)\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#chi-middleware","title":"Chi Middleware","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n\n    \"github.com/go-chi/chi/v5\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc OtelKitMiddleware(tracer *otelkit.Tracer) func(http.Handler) http.Handler {\n    middleware := otelkit.NewHttpMiddleware(tracer)\n    return middleware.Middleware\n}\n\n// Usage\nfunc main() {\n    r := chi.NewRouter()\n    tracer := otelkit.New(\"chi-service\")\n\n    r.Use(OtelKitMiddleware(tracer))\n\n    r.Route(\"/api/v1\", func(r chi.Router) {\n        r.Get(\"/users\", listUsers)\n        r.Post(\"/users\", createUser)\n        r.Get(\"/users/{id}\", getUser)\n    })\n\n    http.ListenAndServe(\":8080\", r)\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#echo-framework","title":"Echo Framework","text":""},{"location":"INTEGRATION_GUIDES/#installation_2","title":"Installation","text":"<pre><code>go get github.com/labstack/echo/v4\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#basic-setup_2","title":"Basic Setup","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/labstack/echo/v4\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    provider, err := otelkit.NewDefaultProvider(ctx, \"echo-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    tracer := otelkit.New(\"echo-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    e := echo.New()\n    e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            handler := middleware.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                c.SetRequest(r)\n                next(c)\n            }))\n            handler.ServeHTTP(c.Response(), c.Request())\n            return nil\n        }\n    })\n\n    e.GET(\"/\", func(c echo.Context) error {\n        return c.String(http.StatusOK, \"Hello, Echo!\")\n    })\n\n    e.Start(\":8080\")\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#echo-middleware","title":"Echo Middleware","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n\n    \"github.com/labstack/echo/v4\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc OtelKitMiddleware(tracer *otelkit.Tracer) echo.MiddlewareFunc {\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            handler := middleware.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                c.SetRequest(r)\n                if err := next(c); err != nil {\n                    c.Error(err)\n                }\n            }))\n            handler.ServeHTTP(c.Response(), c.Request())\n            return nil\n        }\n    }\n}\n\n// Usage\nfunc main() {\n    e := echo.New()\n    tracer := otelkit.New(\"echo-service\")\n\n    e.Use(OtelKitMiddleware(tracer))\n\n    e.GET(\"/users/:id\", getUser)\n    e.Logger.Fatal(e.Start(\":8080\"))\n}\n\nfunc getUser(c echo.Context) error {\n    userID := c.Param(\"id\")\n    return c.JSON(http.StatusOK, map[string]string{\"user\": userID})\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#gorilla-mux","title":"Gorilla Mux","text":""},{"location":"INTEGRATION_GUIDES/#installation_3","title":"Installation","text":"<pre><code>go get github.com/gorilla/mux\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#basic-setup_3","title":"Basic Setup","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    provider, err := otelkit.NewDefaultProvider(ctx, \"mux-service\", \"v1.0.0\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer provider.Shutdown(ctx)\n\n    tracer := otelkit.New(\"mux-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    r := mux.NewRouter()\n    r.Use(middleware.Middleware)\n\n    r.HandleFunc(\"/books/{title}/page/{page}\", func(w http.ResponseWriter, r *http.Request) {\n        vars := mux.Vars(r)\n        title := vars[\"title\"]\n        page := vars[\"page\"]\n\n        w.Write([]byte(\"You've requested the book: \" + title + \" on page \" + page))\n    })\n\n    http.ListenAndServe(\":8080\", r)\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#database-integration","title":"Database Integration","text":""},{"location":"INTEGRATION_GUIDES/#sql-database-tracing","title":"SQL Database Tracing","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n    _ \"github.com/lib/pq\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n\nfunc queryUsers(ctx context.Context, db *sql.DB) ([]User, error) {\n    tracer := otelkit.New(\"user-service\")\n    ctx, span := tracer.Start(ctx, \"query-users\")\n    defer span.End()\n\n    span.SetAttributes(\n        attribute.String(\"db.system\", \"postgresql\"),\n        attribute.String(\"db.operation\", \"SELECT\"),\n    )\n\n    rows, err := db.QueryContext(ctx, \"SELECT id, name, email FROM users\")\n    if err != nil {\n        otelkit.RecordError(span, err)\n        return nil, err\n    }\n    defer rows.Close()\n\n    var users []User\n    for rows.Next() {\n        var user User\n        if err := rows.Scan(&amp;user.ID, &amp;user.Name, &amp;user.Email); err != nil {\n            otelkit.RecordError(span, err)\n            return nil, err\n        }\n        users = append(users, user)\n    }\n\n    span.SetAttributes(attribute.Int(\"db.rows_affected\", len(users)))\n    return users, nil\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#testing-integration","title":"Testing Integration","text":""},{"location":"INTEGRATION_GUIDES/#unit-tests-with-mock-tracer","title":"Unit Tests with Mock Tracer","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"testing\"\n\n    \"github.com/kernelshard/otelkit\"\n    \"github.com/stretchr/testify/assert\"\n    \"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n)\n\nfunc TestHandler(t *testing.T) {\n    // Create in-memory exporter for testing\n    exporter := tracetest.NewInMemoryExporter()\n    provider := sdktrace.NewTracerProvider(\n        sdktrace.WithSyncer(exporter),\n    )\n\n    tracer := otelkit.New(\"test-service\")\n    handler := createHandler(tracer)\n\n    // Test your handler\n    // Assert on exported spans\n    spans := exporter.GetSpans()\n    assert.Len(t, spans, 1)\n}\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#configuration-examples","title":"Configuration Examples","text":""},{"location":"INTEGRATION_GUIDES/#development","title":"Development","text":"<pre><code>config := otelkit.NewProviderConfig(\"dev-service\", \"1.0.0\").\n    WithOTLPExporter(\"localhost:4317\", \"grpc\", true).\n    WithSampling(\"always_on\", 1.0)\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#staging","title":"Staging","text":"<pre><code>config := otelkit.NewProviderConfig(\"staging-service\", \"1.0.0\").\n    WithOTLPExporter(\"staging-collector:4317\", \"grpc\", false).\n    WithSampling(\"probabilistic\", 0.5)\n</code></pre>"},{"location":"INTEGRATION_GUIDES/#production","title":"Production","text":"<p>```go config := otelkit.NewProviderConfig(\"prod-service\", \"1.0.0\").     WithOTLPExporter(\"prod-collector:4317\", \"grpc\", false).     WithSampling(\"probabilistic\", 0.01).     WithBatchOptions(5time.Second, 30time.Second, 512, 2048)</p>"},{"location":"INTEGRATION_TESTING/","title":"Integration Testing Guide","text":"<p>This guide explains how to set up and run integration tests for OtelKit with real OpenTelemetry collectors.</p>"},{"location":"INTEGRATION_TESTING/#overview","title":"Overview","text":"<p>Integration tests verify that OtelKit works correctly with actual OpenTelemetry collectors (OTLP exporters). These tests require Docker and Docker Compose to run the collector infrastructure.</p>"},{"location":"INTEGRATION_TESTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Go 1.24+ (for integration test build tags)</li> </ul>"},{"location":"INTEGRATION_TESTING/#running-integration-tests","title":"Running Integration Tests","text":""},{"location":"INTEGRATION_TESTING/#option-1-run-all-tests-including-integration-tests","title":"Option 1: Run All Tests (Including Integration Tests)","text":"<pre><code>make test-all\n</code></pre> <p>This runs all tests, including integration tests that require the <code>integration</code> build tag.</p>"},{"location":"INTEGRATION_TESTING/#option-2-run-only-integration-tests","title":"Option 2: Run Only Integration Tests","text":"<pre><code>make test-integration\n</code></pre> <p>Runs only the integration tests (skips if collector is not available).</p>"},{"location":"INTEGRATION_TESTING/#option-3-full-integration-test-with-collector","title":"Option 3: Full Integration Test with Collector","text":"<pre><code>make test-integration-with-collector\n</code></pre> <p>This command: 1. Starts the OpenTelemetry collector using Docker Compose 2. Waits for the collector to be ready 3. Runs all integration tests 4. Stops the collector when tests complete</p>"},{"location":"INTEGRATION_TESTING/#option-4-manual-collector-management","title":"Option 4: Manual Collector Management","text":"<p>Start the collector: <pre><code>make integration-up\n</code></pre></p> <p>Run integration tests: <pre><code>make test-integration\n</code></pre></p> <p>View collector logs: <pre><code>make integration-logs\n</code></pre></p> <p>Stop the collector: <pre><code>make integration-down\n</code></pre></p>"},{"location":"INTEGRATION_TESTING/#test-environment","title":"Test Environment","text":"<p>The integration test environment includes:</p> <ul> <li>OpenTelemetry Collector: Listens on ports 4317 (gRPC) and 4318 (HTTP)</li> <li>Jaeger UI: Available at http://localhost:16686 for trace visualization</li> <li>Zipkin: Available at http://localhost:9411 for alternative trace visualization</li> <li>Prometheus: Available at http://localhost:9090 for metrics</li> <li>Grafana: Available at http://localhost:3000 for metrics visualization (admin/admin)</li> </ul>"},{"location":"INTEGRATION_TESTING/#integration-test-types","title":"Integration Test Types","text":""},{"location":"INTEGRATION_TESTING/#1-http-exporter-tests","title":"1. HTTP Exporter Tests","text":"<p>Tests integration with OTLP HTTP exporter (port 4318)</p>"},{"location":"INTEGRATION_TESTING/#2-grpc-exporter-tests","title":"2. gRPC Exporter Tests","text":"<p>Tests integration with OTLP gRPC exporter (port 4317)</p>"},{"location":"INTEGRATION_TESTING/#3-batch-processing-tests","title":"3. Batch Processing Tests","text":"<p>Tests batch processing behavior with different configurations</p>"},{"location":"INTEGRATION_TESTING/#4-sampling-strategy-tests","title":"4. Sampling Strategy Tests","text":"<p>Tests different sampling strategies (always_on, always_off, probabilistic)</p>"},{"location":"INTEGRATION_TESTING/#5-resource-attribute-tests","title":"5. Resource Attribute Tests","text":"<p>Tests resource attribute propagation to collectors</p>"},{"location":"INTEGRATION_TESTING/#6-multiple-provider-tests","title":"6. Multiple Provider Tests","text":"<p>Tests multiple tracer provider instances</p>"},{"location":"INTEGRATION_TESTING/#7-in-memory-exporter-tests","title":"7. In-Memory Exporter Tests","text":"<p>Fallback tests that don't require external collectors</p>"},{"location":"INTEGRATION_TESTING/#test-configuration","title":"Test Configuration","text":"<p>Integration tests use the <code>//go:build integration</code> build tag. Tests will automatically skip if:</p> <ul> <li>The required collector ports (4317, 4318) are not available</li> <li>Docker/Docker Compose is not installed</li> <li>The integration build tag is not specified</li> </ul>"},{"location":"INTEGRATION_TESTING/#writing-integration-tests","title":"Writing Integration Tests","text":""},{"location":"INTEGRATION_TESTING/#basic-structure","title":"Basic Structure","text":"<pre><code>//go:build integration\n\npackage otelkit\n\nimport (\n    \"testing\"\n)\n\nfunc TestIntegration_Example(t *testing.T) {\n    if !isPortOpen(\"localhost:4318\") {\n        t.Skip(\"Collector not available\")\n    }\n\n    // Test logic here\n}\n</code></pre>"},{"location":"INTEGRATION_TESTING/#best-practices","title":"Best Practices","text":"<ol> <li>Always check for collector availability using <code>isPortOpen()</code></li> <li>Use descriptive test names starting with <code>TestIntegration_</code></li> <li>Clean up resources with proper shutdown/defer statements</li> <li>Include logging to help with debugging</li> <li>Test error scenarios and edge cases</li> </ol>"},{"location":"INTEGRATION_TESTING/#troubleshooting","title":"Troubleshooting","text":""},{"location":"INTEGRATION_TESTING/#collector-not-starting","title":"Collector Not Starting","text":"<ul> <li>Check Docker is running: <code>docker info</code></li> <li>Check ports 4317/4318 are not already in use</li> <li>View logs: <code>make integration-logs</code></li> </ul>"},{"location":"INTEGRATION_TESTING/#tests-skipping","title":"Tests Skipping","text":"<ul> <li>Ensure collector is running: <code>make integration-up</code></li> <li>Wait for collector to be ready (5-10 seconds after startup)</li> </ul>"},{"location":"INTEGRATION_TESTING/#connection-issues","title":"Connection Issues","text":"<ul> <li>Verify firewall settings allow Docker networking</li> <li>Check Docker network configuration</li> </ul>"},{"location":"INTEGRATION_TESTING/#performance-issues","title":"Performance Issues","text":"<p>Integration tests may be slower due to: - Docker container startup time - Network latency to collector - Batch processing timeouts</p>"},{"location":"INTEGRATION_TESTING/#cicd-integration","title":"CI/CD Integration","text":"<p>For CI/CD pipelines, include:</p> <pre><code>steps:\n  - name: Run integration tests\n    run: |\n      make integration-up\n      sleep 10  # Wait for collector\n      make test-integration\n      make integration-down\n</code></pre>"},{"location":"INTEGRATION_TESTING/#manual-testing","title":"Manual Testing","text":"<p>You can also test manually using curl:</p> <pre><code># Test HTTP endpoint\ncurl -X GET http://localhost:4318/health\n\n# Test gRPC endpoint (requires grpcurl)\ngrpcurl -plaintext localhost:4317 list\n</code></pre>"},{"location":"INTEGRATION_TESTING/#monitoring-test-results","title":"Monitoring Test Results","text":"<p>After running integration tests, you can view the results in:</p> <ul> <li>Jaeger UI: http://localhost:16686</li> <li>Zipkin UI: http://localhost:9411  </li> <li>Collector Logs: <code>make integration-logs</code></li> </ul> <p>The integration tests create spans with specific attributes that can be filtered in the UI:</p> <ul> <li><code>test.type</code>: \"integration\"</li> <li><code>sampling.strategy</code>: indicates the sampling type tested</li> <li><code>batch.index</code>: for batch processing tests</li> </ul>"},{"location":"INTEGRATION_TESTING/#next-steps","title":"Next Steps","text":"<ul> <li>Add more comprehensive error scenario testing</li> <li>Include performance benchmarking</li> <li>Add load testing scenarios</li> <li>Test with different collector configurations</li> </ul>"},{"location":"MIGRATION_GUIDE/","title":"Migration Guide","text":"<p>This guide helps you migrate to OtelKit from other OpenTelemetry solutions or upgrade between OtelKit versions.</p>"},{"location":"MIGRATION_GUIDE/#migrating-from-opentelemetry-sdk","title":"Migrating from OpenTelemetry SDK","text":""},{"location":"MIGRATION_GUIDE/#before-opentelemetry-sdk","title":"Before (OpenTelemetry SDK)","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n    \"go.opentelemetry.io/otel/sdk/resource\"\n    sdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n    semconv \"go.opentelemetry.io/otel/semconv/v1.21.0\"\n    \"go.opentelemetry.io/otel/trace\"\n)\n\nfunc setupTracing(ctx context.Context) (*sdktrace.TracerProvider, error) {\n    // Create exporter\n    exporter, err := otlptracegrpc.New(ctx)\n    if err != nil {\n        return nil, err\n    }\n\n    // Create resource\n    res, err := resource.New(ctx,\n        resource.WithAttributes(\n            semconv.ServiceName(\"my-service\"),\n            semconv.ServiceVersion(\"1.0.0\"),\n        ),\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    // Create tracer provider\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(exporter),\n        sdktrace.WithResource(res),\n        sdktrace.WithSampler(sdktrace.AlwaysSample()),\n    )\n\n    // Set global tracer provider\n    otel.SetTracerProvider(tp)\n\n    return tp, nil\n}\n\nfunc createSpan(ctx context.Context, name string) (context.Context, trace.Span) {\n    tracer := otel.Tracer(\"my-service\")\n    return tracer.Start(ctx, name)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#after-otelkit","title":"After (OtelKit)","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc setupTracing(ctx context.Context) (*sdktrace.TracerProvider, error) {\n    // Simple one-line setup\n    return otelkit.NewDefaultProvider(ctx, \"my-service\", \"1.0.0\")\n}\n\nfunc createSpan(ctx context.Context, name string) (context.Context, trace.Span) {\n    tracer := otelkit.New(\"my-service\")\n    return tracer.Start(ctx, name)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#migrating-from-opentracing","title":"Migrating from OpenTracing","text":""},{"location":"MIGRATION_GUIDE/#before-opentracing","title":"Before (OpenTracing)","text":"<pre><code>package main\n\nimport (\n    \"github.com/opentracing/opentracing-go\"\n    \"github.com/opentracing/opentracing-go/ext\"\n    \"github.com/uber/jaeger-client-go\"\n    jaegercfg \"github.com/uber/jaeger-client-go/config\"\n)\n\nfunc setupTracing() {\n    cfg := jaegercfg.Configuration{\n        ServiceName: \"my-service\",\n        Sampler: &amp;jaegercfg.SamplerConfig{\n            Type:  jaeger.SamplerTypeConst,\n            Param: 1,\n        },\n        Reporter: &amp;jaegercfg.ReporterConfig{\n            LogSpans: true,\n        },\n    }\n\n    tracer, _, _ := cfg.NewTracer()\n    opentracing.SetGlobalTracer(tracer)\n}\n\nfunc createSpan(operation string) opentracing.Span {\n    return opentracing.StartSpan(operation)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#after-otelkit_1","title":"After (OtelKit)","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc setupTracing(ctx context.Context) {\n    provider, _ := otelkit.NewDefaultProvider(ctx, \"my-service\", \"1.0.0\")\n    // OtelKit handles global setup automatically\n}\n\nfunc createSpan(ctx context.Context, operation string) (context.Context, trace.Span) {\n    tracer := otelkit.New(\"my-service\")\n    return tracer.Start(ctx, operation)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#migrating-from-go-kit-tracing","title":"Migrating from Go-Kit Tracing","text":""},{"location":"MIGRATION_GUIDE/#before-go-kit","title":"Before (Go-Kit)","text":"<pre><code>package main\n\nimport (\n    \"github.com/go-kit/kit/tracing/opentracing\"\n    \"github.com/opentracing/opentracing-go\"\n)\n\nfunc setupTracing() {\n    // Complex OpenTracing setup\n}\n\nfunc createEndpoint() endpoint.Endpoint {\n    return opentracing.TraceEndpoint(tracer, \"operation-name\", func(ctx context.Context, request interface{}) (interface{}, error) {\n        // Your endpoint logic\n        return nil, nil\n    })\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#after-otelkit_2","title":"After (OtelKit)","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc setupTracing(ctx context.Context) {\n    provider, _ := otelkit.NewDefaultProvider(ctx, \"my-service\", \"1.0.0\")\n}\n\nfunc createHandler() http.HandlerFunc {\n    tracer := otelkit.New(\"my-service\")\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Your handler logic\n    })\n\n    return middleware.Middleware(handler).ServeHTTP\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#version-upgrades","title":"Version Upgrades","text":""},{"location":"MIGRATION_GUIDE/#upgrading-from-otelkit-v0x-to-v1x","title":"Upgrading from OtelKit v0.x to v1.x","text":""},{"location":"MIGRATION_GUIDE/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Configuration API has been simplified</li> <li>Environment variable names have been standardized</li> <li>HTTP middleware signature has changed</li> </ul>"},{"location":"MIGRATION_GUIDE/#migration-steps","title":"Migration Steps","text":"<ol> <li> <p>Update Configuration <pre><code>// Old (v0.x)\nconfig := otelkit.Config{\n    ServiceName: \"my-service\",\n    CollectorEndpoint: \"localhost:4317\",\n}\n\n// New (v1.x)\nconfig := otelkit.NewProviderConfig(\"my-service\", \"1.0.0\").\n    WithOTLPExporter(\"localhost:4317\", \"grpc\", true)\n</code></pre></p> </li> <li> <p>Update Middleware Usage <pre><code>// Old (v0.x)\nmiddleware := otelkit.NewMiddleware(tracer)\nhandler := middleware(handler)\n\n// New (v1.x)\nmiddleware := otelkit.NewHttpMiddleware(tracer)\nhandler := middleware.Middleware(handler)\n</code></pre></p> </li> <li> <p>Update Environment Variables <pre><code># Old (v0.x)\nexport OTEL_COLLECTOR_ENDPOINT=localhost:4317\nexport OTEL_SERVICE_NAME=my-service\n\n# New (v1.x)\nexport OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317\nexport OTEL_SERVICE_NAME=my-service\n</code></pre></p> </li> </ol>"},{"location":"MIGRATION_GUIDE/#upgrading-from-otelkit-v10-to-v11","title":"Upgrading from OtelKit v1.0 to v1.1","text":""},{"location":"MIGRATION_GUIDE/#new-features","title":"New Features","text":"<ul> <li>Added <code>StartServerSpan</code> and <code>StartClientSpan</code> convenience methods</li> <li>Added automatic hostname detection</li> <li>Enhanced error handling</li> </ul>"},{"location":"MIGRATION_GUIDE/#migration-steps_1","title":"Migration Steps","text":"<p>No breaking changes. Simply update your import: <pre><code>go get github.com/kernelshard/otelkit@latest\n</code></pre></p>"},{"location":"MIGRATION_GUIDE/#common-migration-patterns","title":"Common Migration Patterns","text":""},{"location":"MIGRATION_GUIDE/#span-attributes-migration","title":"Span Attributes Migration","text":""},{"location":"MIGRATION_GUIDE/#opentelemetry-sdk","title":"OpenTelemetry SDK","text":"<pre><code>// Before\nspan.SetAttributes(\n    attribute.String(\"http.method\", \"GET\"),\n    attribute.Int(\"http.status_code\", 200),\n)\n\n// After\notelkit.AddAttributes(span,\n    attribute.String(\"http.method\", \"GET\"),\n    attribute.Int(\"http.status_code\", 200),\n)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#error-handling-migration","title":"Error Handling Migration","text":""},{"location":"MIGRATION_GUIDE/#opentelemetry-sdk_1","title":"OpenTelemetry SDK","text":"<pre><code>// Before\nspan.RecordError(err)\nspan.SetStatus(codes.Error, err.Error())\n\n// After\notelkit.RecordError(span, err)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#context-propagation-migration","title":"Context Propagation Migration","text":""},{"location":"MIGRATION_GUIDE/#opentracing","title":"OpenTracing","text":"<pre><code>// Before\nspan := opentracing.StartSpan(\"operation\")\nctx := opentracing.ContextWithSpan(context.Background(), span)\n\n// After\nctx, span := tracer.Start(context.Background(), \"operation\")\n</code></pre>"},{"location":"MIGRATION_GUIDE/#testing-migration","title":"Testing Migration","text":""},{"location":"MIGRATION_GUIDE/#before-opentelemetry-sdk_1","title":"Before (OpenTelemetry SDK)","text":"<pre><code>func TestTracing(t *testing.T) {\n    exporter := tracetest.NewInMemoryExporter()\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithSyncer(exporter),\n    )\n\n    tracer := tp.Tracer(\"test\")\n    _, span := tracer.Start(context.Background(), \"test-span\")\n    span.End()\n\n    spans := exporter.GetSpans()\n    assert.Len(t, spans, 1)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#after-otelkit_3","title":"After (OtelKit)","text":"<pre><code>func TestTracing(t *testing.T) {\n    exporter := tracetest.NewInMemoryExporter()\n    config := otelkit.NewProviderConfig(\"test\", \"1.0.0\")\n\n    tp, err := otelkit.NewProvider(context.Background(), config)\n    require.NoError(t, err)\n\n    tracer := otelkit.New(\"test\")\n    _, span := tracer.Start(context.Background(), \"test-span\")\n    span.End()\n\n    spans := exporter.GetSpans()\n    assert.Len(t, spans, 1)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#performance-considerations","title":"Performance Considerations","text":""},{"location":"MIGRATION_GUIDE/#memory-usage","title":"Memory Usage","text":"<ul> <li>OtelKit uses ~20% less memory than raw OpenTelemetry SDK</li> <li>Automatic resource cleanup</li> <li>Optimized batch processing</li> </ul>"},{"location":"MIGRATION_GUIDE/#cpu-usage","title":"CPU Usage","text":"<ul> <li>Reduced CPU overhead through efficient span creation</li> <li>Optimized attribute handling</li> <li>Minimal allocations in hot paths</li> </ul>"},{"location":"MIGRATION_GUIDE/#rollback-strategy","title":"Rollback Strategy","text":"<p>If you need to rollback after migration:</p> <ol> <li>Keep old configuration commented out initially</li> <li>Use feature flags to switch between implementations</li> <li>Gradual rollout with percentage-based deployment</li> <li>Monitor key metrics during migration</li> </ol>"},{"location":"MIGRATION_GUIDE/#example-rollback-implementation","title":"Example Rollback Implementation","text":"<pre><code>var useOtelKit = os.Getenv(\"USE_OTELKIT\") == \"true\"\n\nfunc setupTracing(ctx context.Context) error {\n    if useOtelKit {\n        return setupOtelKit(ctx)\n    }\n    return setupLegacy(ctx)\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#support","title":"Support","text":"<p>For migration assistance: 1. Check the troubleshooting guide 2. Review GitHub issues 3. Create a minimal reproduction case 4. Provide debug information as outlined in troubleshooting</p>"},{"location":"TROUBLESHOOTING/","title":"Troubleshooting Guide","text":"<p>This guide helps you resolve common issues when using OtelKit.</p>"},{"location":"TROUBLESHOOTING/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"TROUBLESHOOTING/#1-no-traces-appearing","title":"1. No Traces Appearing","text":"<p>Symptoms: - No traces visible in your collector UI - Empty trace list in Jaeger/Zipkin</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#check-collector-connectivity","title":"Check Collector Connectivity","text":"<pre><code># Test connectivity to collector\ncurl -v http://localhost:4318/v1/traces\n# or for gRPC\ngrpcurl -plaintext localhost:4317 list\n</code></pre>"},{"location":"TROUBLESHOOTING/#verify-configuration","title":"Verify Configuration","text":"<pre><code>// Add debug logging\nconfig := otelkit.NewProviderConfig(\"service\", \"v1.0.0\")\nfmt.Printf(\"Config: %+v\\n\", config)\n</code></pre>"},{"location":"TROUBLESHOOTING/#check-sampling","title":"Check Sampling","text":"<pre><code>// Ensure sampling is enabled\nconfig.WithSampling(\"always_on\", 1.0) // For debugging\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-high-memory-usage","title":"2. High Memory Usage","text":"<p>Symptoms: - Application memory usage increases over time - Out of memory errors</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#reduce-batch-sizes","title":"Reduce Batch Sizes","text":"<pre><code>config.WithBatchOptions(\n    5*time.Second,\n    30*time.Second,\n    256,  // Reduced batch size\n    1024, // Reduced queue size\n)\n</code></pre>"},{"location":"TROUBLESHOOTING/#increase-sampling","title":"Increase Sampling","text":"<pre><code>config.WithSampling(\"probabilistic\", 0.1) // Increase sampling ratio\n</code></pre>"},{"location":"TROUBLESHOOTING/#monitor-span-creation","title":"Monitor Span Creation","text":"<pre><code>// Add span count monitoring\nspanCounter := 0\ngo func() {\n    for {\n        time.Sleep(10 * time.Second)\n        fmt.Printf(\"Spans created: %d\\n\", spanCounter)\n    }\n}()\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-performance-issues","title":"3. Performance Issues","text":"<p>Symptoms: - High CPU usage - Slow request processing</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#tune-batch-processing","title":"Tune Batch Processing","text":"<pre><code>config.WithBatchOptions(\n    10*time.Second,  // Longer batch timeout\n    60*time.Second,  // Longer export timeout\n    1024,           // Larger batch size\n    4096,           // Larger queue size\n)\n</code></pre>"},{"location":"TROUBLESHOOTING/#use-probabilistic-sampling","title":"Use Probabilistic Sampling","text":"<pre><code>config.WithSampling(\"probabilistic\", 0.01) // 1% sampling\n</code></pre>"},{"location":"TROUBLESHOOTING/#async-span-creation","title":"Async Span Creation","text":"<pre><code>// Use goroutines for expensive operations\ngo func() {\n    ctx, span := tracer.Start(ctx, \"background-work\")\n    defer span.End()\n    // Your background work\n}()\n</code></pre>"},{"location":"TROUBLESHOOTING/#4-configuration-errors","title":"4. Configuration Errors","text":"<p>Symptoms: - Application fails to start - Configuration validation errors</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#validate-configuration","title":"Validate Configuration","text":"<pre><code>if err := config.Validate(); err != nil {\n    fmt.Printf(\"Configuration error: %v\\n\", err)\n    // Handle error appropriately\n}\n</code></pre>"},{"location":"TROUBLESHOOTING/#check-environment-variables","title":"Check Environment Variables","text":"<pre><code># Print all OTEL environment variables\nenv | grep OTEL\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-configuration-loading","title":"Debug Configuration Loading","text":"<pre><code>cfg := otelkit.NewConfigFromEnv()\nfmt.Printf(\"Loaded config: %+v\\n\", cfg)\n</code></pre>"},{"location":"TROUBLESHOOTING/#5-collector-connection-issues","title":"5. Collector Connection Issues","text":"<p>Symptoms: - Connection refused errors - TLS certificate issues</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#test-connectivity","title":"Test Connectivity","text":"<pre><code># Test HTTP endpoint\ncurl -X POST http://localhost:4318/v1/traces \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"resourceSpans\":[]}'\n</code></pre>"},{"location":"TROUBLESHOOTING/#check-tls-configuration","title":"Check TLS Configuration","text":"<pre><code>// For insecure connections (development)\nconfig.WithOTLPExporter(\"localhost:4317\", \"grpc\", true)\n\n// For secure connections (production)\nconfig.WithOTLPExporter(\"collector.example.com:4317\", \"grpc\", false)\n</code></pre>"},{"location":"TROUBLESHOOTING/#6-context-propagation-issues","title":"6. Context Propagation Issues","text":"<p>Symptoms: - Broken trace chains - Missing parent spans</p> <p>Solutions:</p>"},{"location":"TROUBLESHOOTING/#verify-context-usage","title":"Verify Context Usage","text":"<pre><code>// Always pass context\nfunc processRequest(ctx context.Context, data string) error {\n    ctx, span := tracer.Start(ctx, \"process-request\")\n    defer span.End()\n\n    // Pass context to downstream calls\n    return downstreamService.Process(ctx, data)\n}\n</code></pre>"},{"location":"TROUBLESHOOTING/#check-middleware-order","title":"Check Middleware Order","text":"<pre><code>// Ensure middleware is applied correctly\nr := chi.NewRouter()\nr.Use(otelkitMiddleware) // Applied before routes\nr.Get(\"/api\", handler)\n</code></pre>"},{"location":"TROUBLESHOOTING/#debugging-tools","title":"Debugging Tools","text":""},{"location":"TROUBLESHOOTING/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>import \"go.opentelemetry.io/otel/sdk/trace\"\n\n// Enable debug logging\nlogger := log.New(os.Stdout, \"OTEL: \", log.LstdFlags)\ntp := sdktrace.NewTracerProvider(\n    sdktrace.WithSyncer(exporter),\n    sdktrace.WithResource(res),\n)\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-in-memory-testing","title":"2. In-Memory Testing","text":"<pre><code>import \"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\n// Use in-memory exporter for testing\nexporter := tracetest.NewInMemoryExporter()\nprovider := sdktrace.NewTracerProvider(\n    sdktrace.WithSyncer(exporter),\n)\n\n// After operations\nspans := exporter.GetSpans()\nfmt.Printf(\"Captured %d spans\\n\", len(spans))\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-health-check-endpoint","title":"3. Health Check Endpoint","text":"<pre><code>func healthCheck(w http.ResponseWriter, r *http.Request) {\n    ctx, span := tracer.Start(r.Context(), \"health-check\")\n    defer span.End()\n\n    // Perform health check\n    if err := checkCollectorHealth(ctx); err != nil {\n        span.SetStatus(codes.Error, err.Error())\n        http.Error(w, \"Unhealthy\", http.StatusServiceUnavailable)\n        return\n    }\n\n    w.WriteHeader(http.StatusOK)\n    w.Write([]byte(\"OK\"))\n}\n</code></pre>"},{"location":"TROUBLESHOOTING/#environment-specific-issues","title":"Environment-Specific Issues","text":""},{"location":"TROUBLESHOOTING/#docker-issues","title":"Docker Issues","text":"<pre><code># Ensure proper networking\nFROM golang:1.22-alpine\nWORKDIR /app\nCOPY . .\nRUN go build -o app .\n\n# Use host network for local development\ndocker run --network host my-app\n</code></pre>"},{"location":"TROUBLESHOOTING/#kubernetes-issues","title":"Kubernetes Issues","text":"<pre><code># Ensure proper service discovery\napiVersion: v1\nkind: Service\nmetadata:\n  name: otel-collector\nspec:\n  selector:\n    app: otel-collector\n  ports:\n  - port: 4317\n    targetPort: 4317\n</code></pre>"},{"location":"TROUBLESHOOTING/#cloud-provider-issues","title":"Cloud Provider Issues","text":"<pre><code>// AWS ECS\nconfig := otelkit.NewProviderConfig(\"service\", \"v1.0.0\").\n    WithOTLPExporter(\"otel-collector.local:4317\", \"grpc\", false)\n\n// GCP Cloud Run\nconfig := otelkit.NewProviderConfig(\"service\", \"v1.0.0\").\n    WithOTLPExporter(\"otel-collector:4317\", \"grpc\", false)\n</code></pre>"},{"location":"TROUBLESHOOTING/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"TROUBLESHOOTING/#memory-profiling","title":"Memory Profiling","text":"<pre><code>import \"runtime\"\n\n// Monitor memory usage\nvar m runtime.MemStats\nruntime.ReadMemStats(&amp;m)\nfmt.Printf(\"Memory usage: %d MB\\n\", m.Alloc/1024/1024)\n</code></pre>"},{"location":"TROUBLESHOOTING/#span-count-monitoring","title":"Span Count Monitoring","text":"<pre><code>// Monitor span creation rate\nspanCounter := 0\ngo func() {\n    for {\n        time.Sleep(10 * time.Second)\n        fmt.Printf(\"Spans per second: %d\\n\", spanCounter/10)\n        spanCounter = 0\n    }\n}()\n</code></pre>"},{"location":"TROUBLESHOOTING/#common-error-messages","title":"Common Error Messages","text":""},{"location":"TROUBLESHOOTING/#connection-refused","title":"\"connection refused\"","text":"<ul> <li>Check if collector is running</li> <li>Verify endpoint configuration</li> <li>Check firewall settings</li> </ul>"},{"location":"TROUBLESHOOTING/#certificate-verify-failed","title":"\"certificate verify failed\"","text":"<ul> <li>Use insecure mode for development</li> <li>Install proper certificates for production</li> <li>Check certificate validity</li> </ul>"},{"location":"TROUBLESHOOTING/#context-deadline-exceeded","title":"\"context deadline exceeded\"","text":"<ul> <li>Increase timeout values</li> <li>Check network connectivity</li> <li>Verify collector availability</li> </ul>"},{"location":"TROUBLESHOOTING/#getting-help","title":"Getting Help","text":""},{"location":"TROUBLESHOOTING/#debug-information-to-collect","title":"Debug Information to Collect","text":"<ol> <li>Configuration values (sanitized)</li> <li>Environment variables</li> <li>Collector logs</li> <li>Application logs</li> <li>Network connectivity tests</li> </ol>"},{"location":"TROUBLESHOOTING/#support-channels","title":"Support Channels","text":"<ol> <li>Check GitHub issues</li> <li>Review documentation</li> <li>Test with minimal reproduction</li> <li>Provide debug information</li> </ol>"},{"location":"TROUBLESHOOTING/#example-debug-script","title":"Example Debug Script","text":"<p>```bash</p>"},{"location":"TROUBLESHOOTING/#binbash","title":"!/bin/bash","text":"<p>echo \"=== OtelKit Debug Information ===\" echo \"Go version: $(go version)\" echo \"OtelKit version: $(go list -m github.com/kernelshard/otelkit)\" echo \"Environment variables:\" env | grep OTEL echo \"=== Collector Health Check ===\" curl -v http://localhost:4318/v1/traces || echo \"Collector not accessible\"</p>"},{"location":"guides/","title":"Guides","text":"<p>Comprehensive guides to help you get the most out of otelkit.</p>"},{"location":"guides/#getting-started","title":"Getting Started","text":"<p>New to otelkit? Start here.</p> <p>Getting Started Guide \u2192</p> <p>Learn how to install and configure otelkit in your Go application in just 5 minutes.</p>"},{"location":"guides/#integration-guides","title":"Integration Guides","text":"<p>Framework-specific integration instructions.</p> <p>View Integration Guides \u2192</p> <ul> <li>Standard Library (net/http)</li> <li>Gorilla Mux</li> <li>Chi Router</li> <li>Gin Framework</li> <li>Echo Framework</li> <li>Fiber</li> </ul>"},{"location":"guides/#advanced-usage","title":"Advanced Usage","text":"<p>Production-ready configurations and best practices.</p> <p>View Advanced Guide \u2192</p> <ul> <li>High-performance setup</li> <li>Custom resource attributes</li> <li>Sampling strategies</li> <li>Custom exporters</li> <li>Error handling patterns</li> </ul>"},{"location":"guides/#integration-testing","title":"Integration Testing","text":"<p>Learn how to test your tracing implementation.</p> <p>View Testing Guide \u2192</p> <ul> <li>Running integration tests</li> <li>Docker Compose setup</li> <li>Collector configuration</li> <li>CI/CD integration</li> </ul>"},{"location":"guides/#migration-guide","title":"Migration Guide","text":"<p>Migrate from other OpenTelemetry solutions.</p> <p>View Migration Guide \u2192</p> <ul> <li>Migrating from OpenTelemetry SDK</li> <li>Migrating from other libraries</li> <li>Version upgrade guides</li> </ul>"},{"location":"guides/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and their solutions.</p> <p>View Troubleshooting \u2192</p> <ul> <li>No traces appearing</li> <li>High memory usage</li> <li>Connection issues</li> <li>Performance problems</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Practical, ready-to-use code examples for common use cases.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#basic-example","title":"Basic Example","text":"<p>Simple HTTP server with automatic tracing.</p> <p>View Basic Example \u2192</p> <p>Learn the fundamentals of setting up otelkit with a basic HTTP server.</p>"},{"location":"examples/#gin-framework","title":"Gin Framework","text":"<p>Integration with the popular Gin web framework.</p> <p>View Gin Example \u2192</p> <p>See how to add tracing to your Gin applications.</p>"},{"location":"examples/#production-setup","title":"Production Setup","text":"<p>Production-ready configuration with all best practices.</p> <p>View Production Example \u2192</p> <p>Complete example with error handling, custom sampling, and exporters.</p>"},{"location":"examples/#traced-http-client","title":"Traced HTTP Client","text":"<p>HTTP client with automatic trace propagation.</p> <p>View HTTP Client Example \u2192</p> <p>Learn how to trace outgoing HTTP requests and propagate context.</p>"},{"location":"examples/#running-examples","title":"Running Examples","text":"<p>All examples can be run directly:</p> <pre><code>cd examples/basic\ngo run main.go\n</code></pre> <p>Then view traces at http://localhost:16686 (Jaeger UI).</p>"},{"location":"examples/basic/","title":"Basic Example","text":"<pre><code>// Package main demonstrates basic OpenTelemetry tracing with HTTP middleware.\n//\n// This example shows how to:\n// 1. Configure tracing with proper provider setup\n// 2. Set up HTTP middleware for automatic tracing\n// 3. Create custom spans manually\n// 4. Add attributes and events to spans\n// 5. Handle errors with tracing\n//\n// Usage:\n//\n//  go run main.go\n//  curl http://localhost:8080/hello\n//  curl http://localhost:8080/error\n//\n// View traces at: http://localhost:16686\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Create provider configuration\n    config := otelkit.NewProviderConfig(\"basic-http-example\", \"1.0.0\").\n        WithOTLPExporter(\"localhost:4317\", \"grpc\", true).\n        WithSampling(\"probabilistic\", 1.0)\n\n    // Initialize tracer provider\n    provider, err := otelkit.NewProvider(ctx, config)\n    if err != nil {\n        log.Fatalf(\"Failed to create tracer provider: %v\", err)\n    }\n    defer func() {\n        shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n        if err := otelkit.ShutdownTracerProvider(shutdownCtx, provider); err != nil {\n            log.Printf(\"Error shutting down provider: %v\", err)\n        }\n    }()\n\n    // Create tracer\n    tracer := otelkit.New(\"basic-http-example\")\n\n    // Create middleware\n    middleware := otelkit.NewHttpMiddleware(tracer)\n\n    // Setup HTTP handlers\n    mux := http.NewServeMux()\n    // ...rest of code omitted for brevity...\n</code></pre> <p>A minimal example of using otelkit for HTTP tracing.</p>"},{"location":"examples/gin/","title":"Gin Example","text":"<pre><code>// Package main demonstrates OpenTelemetry tracing with Gin framework integration.\n//\n// This example shows how to integrate OpenTelemetry tracing with Gin web framework\n// using the official otelgin middleware from OpenTelemetry contrib.\n//\n// Usage:\n//\n//  go run main.go\n//  curl http://localhost:8080/api/users\n//  curl http://localhost:8080/api/users/1\n//  curl http://localhost:8080/health\n//\n// Installation:\n//\n//  go get github.com/gin-gonic/gin\n//  go get go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\n//\n// The example uses:\n// - otelgin.Middleware for automatic HTTP request tracing\n// - Custom spans for business logic\n// - Context propagation for distributed tracing\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n    \"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/codes\"\n    \"go.opentelemetry.io/otel/trace\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\n// User represents a user entity\ntype User struct {\n    ID    string `json:\"id\"`\n    Name  string `json:\"name\"`\n    Email string `json:\"email\"`\n}\n\n// getTracerFromContext retrieves the tracer from Gin context or creates a new one\nfunc getTracerFromContext(c *gin.Context) *otelkit.Tracer {\n    // Get the global tracer\n    return otelkit.New(\"gin-example\")\n}\n\n// createCustomSpan creates a custom span within the current request context\nfunc createCustomSpan(c *gin.Context, operationName string) (context.Context, trace.Span) {\n    // Get the current span context from the request\n    ctx := c.Request.Context()\n    tracer := getTracerFromContext(c)\n\n    // Create a child span\n    return tracer.Start(ctx, operationName)\n}\n// ...rest of code omitted for brevity...\n</code></pre> <p>How to use otelkit with the Gin framework.</p>"},{"location":"examples/production/","title":"Production Example","text":"<pre><code>// Package main demonstrates a production-ready OpenTelemetry tracing setup with comprehensive configuration,\n// error handling, and best practices for real-world applications.\n//\n// This example shows:\n// 1. Advanced configuration with environment-based setup\n// 2. Proper error handling and recovery\n// 3. Health checks and metrics endpoints\n// 4. Graceful shutdown handling\n// 5. Structured logging with trace correlation\n// 6. Production-ready middleware stack\n// 7. Database tracing with connection pooling\n// 8. Circuit breaker pattern for resilience\n//\n// Usage:\n//\n//  go run main.go\n//  curl http://localhost:8080/api/users\n//  curl http://localhost:8080/health\n//  curl http://localhost:8080/metrics\n//\n// Environment Variables:\n//\n//  OTEL_SERVICE_NAME=production-service\n//  OTEL_SERVICE_VERSION=1.0.0\n//  OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317\n//  OTEL_TRACES_SAMPLER=probabilistic\n//  OTEL_TRACES_SAMPLER_ARG=0.1\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n    \"github.com/kernelshard/otelkit/internal/config\"\n    \"go.opentelemetry.io/otel/attribute\"\n)\n\n// User represents a user entity\ntype User struct {\n    ID        int64     `json:\"id\"`\n    Name      string    `json:\"name\"`\n    Email     string    `json:\"email\"`\n    CreatedAt time.Time `json:\"created_at\"`\n}\n\n// App represents the application with all dependencies\ntype App struct {\n    db     *sql.DB\n    tracer *otelkit.Tracer\n}\n// ...rest of code omitted for brevity...\n</code></pre> <p>A production-ready setup for otelkit.</p>"},{"location":"examples/traced_http_client/","title":"Traced HTTP Client Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/kernelshard/otelkit\"\n)\n\nfunc main() {\n    // Initialize tracing\n    ctx := context.Background()\n    shutdown, err := otelkit.SetupTracing(ctx, \"traced-http-client-example\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer shutdown(ctx)\n\n    // Create a tracer\n    tracer := otelkit.New(\"http-client-example\")\n\n    // Create a traced HTTP client\n    client := otelkit.NewTracedHTTPClient(&amp;http.Client{\n        Timeout: 10 * time.Second,\n    }, tracer, \"jsonplaceholder-api\")\n\n    // Make a GET request\n    ctx, span := tracer.Start(ctx, \"example-http-request\")\n    defer span.End()\n\n    resp, err := client.Get(ctx, \"https://jsonplaceholder.typicode.com/posts/1\")\n    if err != nil {\n        otelkit.RecordError(span, err)\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n\n    fmt.Printf(\"Response Status: %s\\n\", resp.Status)\n    fmt.Printf(\"Content-Type: %s\\n\", resp.Header.Get(\"Content-Type\"))\n\n    // Make a POST request\n    postData := []byte(`{\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}`)\n    resp2, err := client.Post(ctx, \"https://jsonplaceholder.typicode.com/posts\", \"application/json\", postData)\n    if err != nil {\n        otelkit.RecordError(span, err)\n        log.Printf(\"POST request failed: %v\", err)\n    } else {\n        defer resp2.Body.Close()\n        fmt.Printf(\"POST Response Status: %s\\n\", resp2.Status)\n    }\n\n    fmt.Println(\"HTTP client tracing example completed. Check your tracing backend for spans.\")\n}\n</code></pre> <p>How to trace outbound HTTP requests with otelkit.</p>"}]}